// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/journal.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/henrybravo/micro-report/protos/gen/go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// JournalServiceName is the fully-qualified name of the JournalService service.
	JournalServiceName = "v1.JournalService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// JournalServiceRetrieveJournalPaginatedReportProcedure is the fully-qualified name of the
	// JournalService's RetrieveJournalPaginatedReport RPC.
	JournalServiceRetrieveJournalPaginatedReportProcedure = "/v1.JournalService/RetrieveJournalPaginatedReport"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	journalServiceServiceDescriptor                              = v1.File_v1_journal_proto.Services().ByName("JournalService")
	journalServiceRetrieveJournalPaginatedReportMethodDescriptor = journalServiceServiceDescriptor.Methods().ByName("RetrieveJournalPaginatedReport")
)

// JournalServiceClient is a client for the v1.JournalService service.
type JournalServiceClient interface {
	RetrieveJournalPaginatedReport(context.Context, *connect.Request[v1.RetrieveJournalPaginatedReportRequest]) (*connect.Response[v1.RetrieveJournalPaginatedReportResponse], error)
}

// NewJournalServiceClient constructs a client for the v1.JournalService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewJournalServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) JournalServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &journalServiceClient{
		retrieveJournalPaginatedReport: connect.NewClient[v1.RetrieveJournalPaginatedReportRequest, v1.RetrieveJournalPaginatedReportResponse](
			httpClient,
			baseURL+JournalServiceRetrieveJournalPaginatedReportProcedure,
			connect.WithSchema(journalServiceRetrieveJournalPaginatedReportMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// journalServiceClient implements JournalServiceClient.
type journalServiceClient struct {
	retrieveJournalPaginatedReport *connect.Client[v1.RetrieveJournalPaginatedReportRequest, v1.RetrieveJournalPaginatedReportResponse]
}

// RetrieveJournalPaginatedReport calls v1.JournalService.RetrieveJournalPaginatedReport.
func (c *journalServiceClient) RetrieveJournalPaginatedReport(ctx context.Context, req *connect.Request[v1.RetrieveJournalPaginatedReportRequest]) (*connect.Response[v1.RetrieveJournalPaginatedReportResponse], error) {
	return c.retrieveJournalPaginatedReport.CallUnary(ctx, req)
}

// JournalServiceHandler is an implementation of the v1.JournalService service.
type JournalServiceHandler interface {
	RetrieveJournalPaginatedReport(context.Context, *connect.Request[v1.RetrieveJournalPaginatedReportRequest]) (*connect.Response[v1.RetrieveJournalPaginatedReportResponse], error)
}

// NewJournalServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewJournalServiceHandler(svc JournalServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	journalServiceRetrieveJournalPaginatedReportHandler := connect.NewUnaryHandler(
		JournalServiceRetrieveJournalPaginatedReportProcedure,
		svc.RetrieveJournalPaginatedReport,
		connect.WithSchema(journalServiceRetrieveJournalPaginatedReportMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.JournalService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case JournalServiceRetrieveJournalPaginatedReportProcedure:
			journalServiceRetrieveJournalPaginatedReportHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedJournalServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedJournalServiceHandler struct{}

func (UnimplementedJournalServiceHandler) RetrieveJournalPaginatedReport(context.Context, *connect.Request[v1.RetrieveJournalPaginatedReportRequest]) (*connect.Response[v1.RetrieveJournalPaginatedReportResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.JournalService.RetrieveJournalPaginatedReport is not implemented"))
}
